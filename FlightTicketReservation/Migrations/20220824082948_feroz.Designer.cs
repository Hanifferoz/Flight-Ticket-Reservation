// <auto-generated />
using System;
using FlightTicketReservation.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace FlightTicketReservation.Migrations
{
    [DbContext(typeof(databasetrainingContext))]
    [Migration("20220824082948_feroz")]
    partial class feroz
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:Collation", "SQL_Latin1_General_CP1_CI_AS")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.13")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("FlightTicketReservation.Models.AEmployee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("address");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("a_employee");
                });

            modelBuilder.Entity("FlightTicketReservation.Models.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("AccountNumber")
                        .HasColumnType("bigint");

                    b.Property<decimal>("CurrentBalance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("CustomerAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("accounts");
                });

            modelBuilder.Entity("FlightTicketReservation.Models.AjayEmployee1", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.Property<double?>("Salary")
                        .HasColumnType("float")
                        .HasColumnName("salary");

                    b.HasKey("Id");

                    b.ToTable("Ajay_Employee1");
                });

            modelBuilder.Entity("FlightTicketReservation.Models.AjaySbaccount", b =>
                {
                    b.Property<int>("AccountNumber")
                        .HasColumnType("int")
                        .HasColumnName("accountNumber");

                    b.Property<double?>("CurrentBalance")
                        .HasColumnType("float")
                        .HasColumnName("currentBalance");

                    b.Property<string>("CustomerAddress")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("customerAddress");

                    b.Property<string>("CustomerName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("customerName");

                    b.Property<string>("Image")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("image");

                    b.Property<double?>("MaxBalance")
                        .HasColumnType("float")
                        .HasColumnName("maxBalance");

                    b.HasKey("AccountNumber");

                    b.ToTable("Ajay_SBAccount");
                });

            modelBuilder.Entity("FlightTicketReservation.Models.AjaySbtransaction1", b =>
                {
                    b.Property<int>("TransactionId")
                        .HasColumnType("int")
                        .HasColumnName("transactionId");

                    b.Property<int>("AccountNumber")
                        .HasColumnType("int")
                        .HasColumnName("accountNumber");

                    b.Property<double?>("Amount")
                        .HasColumnType("float")
                        .HasColumnName("amount");

                    b.Property<string>("TransactionDate")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("transactionDate");

                    b.Property<string>("TransactionType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("transactionType");

                    b.HasKey("TransactionId");

                    b.ToTable("Ajay_SBTransaction1");
                });

            modelBuilder.Entity("FlightTicketReservation.Models.AviBookingDetail", b =>
                {
                    b.Property<int>("BookingId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Doj")
                        .HasColumnType("datetime");

                    b.Property<int>("FlightId")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfPass")
                        .HasColumnType("int");

                    b.Property<int?>("RoutId")
                        .HasColumnType("int");

                    b.Property<double>("TotalValue")
                        .HasColumnType("float");

                    b.HasKey("BookingId");

                    b.ToTable("Avi_BookingDetails");
                });

            modelBuilder.Entity("FlightTicketReservation.Models.AviSbaccount", b =>
                {
                    b.Property<int>("AccountNumber")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<double>("CurrentBalance")
                        .HasColumnType("float");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("AccountNumber");

                    b.ToTable("Avi_SBAccount");
                });

            modelBuilder.Entity("FlightTicketReservation.Models.AviSbtransaction", b =>
                {
                    b.Property<int>("TransactionId")
                        .HasColumnType("int")
                        .HasColumnName("TransactionID");

                    b.Property<int>("AccountNumber")
                        .HasColumnType("int");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime");

                    b.Property<string>("TransactionType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("TransactionId");

                    b.ToTable("Avi_SBTransaction");
                });

            modelBuilder.Entity("FlightTicketReservation.Models.BhramarSbaccount", b =>
                {
                    b.Property<int>("AccountNumber")
                        .HasColumnType("int");

                    b.Property<string>("CurrentAddress")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<double>("CurrentBalance")
                        .HasColumnType("float");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("AccountNumber");

                    b.ToTable("Bhramar_SBAccount");
                });

            modelBuilder.Entity("FlightTicketReservation.Models.BhramarSbtransaction", b =>
                {
                    b.Property<string>("TransactionId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("AccountNumber")
                        .HasColumnType("int");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("date");

                    b.Property<string>("TransactionType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("TransactionId");

                    b.ToTable("Bhramar_SBTransaction");
                });

            modelBuilder.Entity("FlightTicketReservation.Models.BookingDetail", b =>
                {
                    b.Property<int>("Bookingid")
                        .HasColumnType("int")
                        .HasColumnName("bookingid");

                    b.Property<int?>("Customerid")
                        .HasColumnType("int")
                        .HasColumnName("customerid");

                    b.Property<DateTime?>("Doj")
                        .HasColumnType("datetime")
                        .HasColumnName("doj");

                    b.Property<int?>("Flightid")
                        .HasColumnType("int")
                        .HasColumnName("flightid");

                    b.Property<int?>("Numberofpassengers")
                        .HasColumnType("int")
                        .HasColumnName("numberofpassengers");

                    b.Property<int?>("Routeid")
                        .HasColumnType("int")
                        .HasColumnName("routeid");

                    b.Property<double?>("Totalvalue")
                        .HasColumnType("float")
                        .HasColumnName("totalvalue");

                    b.HasKey("Bookingid");

                    b.ToTable("BookingDetails");
                });

            modelBuilder.Entity("FlightTicketReservation.Models.BookingDetailsAbhishek", b =>
                {
                    b.Property<int>("BookingId")
                        .HasColumnType("int");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Doj")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("FlightId")
                        .HasColumnType("int");

                    b.Property<int>("Noofpassanger")
                        .HasColumnType("int");

                    b.Property<int>("RouteId")
                        .HasColumnType("int");

                    b.Property<decimal>("Totalvalue")
                        .HasColumnType("decimal(18,0)");

                    b.HasKey("BookingId")
                        .HasName("BookingId");

                    b.ToTable("BookingDetails_Abhishek");
                });

            modelBuilder.Entity("FlightTicketReservation.Models.BookingDetailsAjay", b =>
                {
                    b.Property<int>("BookingId")
                        .HasColumnType("int")
                        .HasColumnName("bookingId");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("customerId");

                    b.Property<DateTime?>("Doj")
                        .HasColumnType("datetime")
                        .HasColumnName("doj");

                    b.Property<int?>("FlightId")
                        .HasColumnType("int")
                        .HasColumnName("flightId");

                    b.Property<int?>("NumberOfPassengers")
                        .HasColumnType("int")
                        .HasColumnName("numberOfPassengers");

                    b.Property<int?>("RouteId")
                        .HasColumnType("int")
                        .HasColumnName("routeId");

                    b.Property<int?>("TotalValue")
                        .HasColumnType("int")
                        .HasColumnName("totalValue");

                    b.HasKey("BookingId");

                    b.ToTable("BookingDetails_Ajay");
                });

            modelBuilder.Entity("FlightTicketReservation.Models.CustomerDetail", b =>
                {
                    b.Property<int>("Customerid")
                        .HasColumnType("int")
                        .HasColumnName("customerid");

                    b.Property<string>("Customername")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("customername");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("password");

                    b.HasKey("Customerid");

                    b.ToTable("CustomerDetails");
                });

            modelBuilder.Entity("FlightTicketReservation.Models.DarshanSbaccount", b =>
                {
                    b.Property<int>("AccountNumber")
                        .HasColumnType("int")
                        .HasColumnName("accountNumber");

                    b.Property<decimal?>("CurrentBalance")
                        .HasColumnType("decimal(18,0)")
                        .HasColumnName("currentBalance");

                    b.Property<string>("CustomerAddress")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("customerAddress");

                    b.Property<string>("CustomerName")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .HasColumnName("customerName")
                        .IsFixedLength(true);

                    b.HasKey("AccountNumber");

                    b.ToTable("darshanSBAccount");
                });

            modelBuilder.Entity("FlightTicketReservation.Models.DarshanSbtransaction", b =>
                {
                    b.Property<string>("TransactionId")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .HasColumnName("transactionId")
                        .IsFixedLength(true);

                    b.Property<int?>("AccountNumber")
                        .HasColumnType("int")
                        .HasColumnName("accountNumber");

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(18,0)")
                        .HasColumnName("amount");

                    b.Property<DateTime?>("TransactionDate")
                        .HasColumnType("date")
                        .HasColumnName("transactionDate");

                    b.Property<string>("TransactionType")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .HasColumnName("transactionType")
                        .IsFixedLength(true);

                    b.HasKey("TransactionId");

                    b.ToTable("darshanSBTransaction");
                });

            modelBuilder.Entity("FlightTicketReservation.Models.DemoImageDb", b =>
                {
                    b.Property<string>("ImageSource")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.ToTable("DemoImageDb");
                });

            modelBuilder.Entity("FlightTicketReservation.Models.DivyanshSbaccount", b =>
                {
                    b.Property<int>("AccountNumber")
                        .HasColumnType("int");

                    b.Property<double?>("Currentbalance")
                        .HasColumnType("float")
                        .HasColumnName("currentbalance");

                    b.Property<string>("Customeraddress")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("customeraddress");

                    b.Property<string>("Customername")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("customername");

                    b.HasKey("AccountNumber");

                    b.ToTable("Divyansh_SBAccount");
                });

            modelBuilder.Entity("FlightTicketReservation.Models.DivyanshSbtransaction", b =>
                {
                    b.Property<int>("Transactionid")
                        .HasColumnType("int")
                        .HasColumnName("transactionid");

                    b.Property<int>("Accountnumber")
                        .HasColumnType("int")
                        .HasColumnName("accountnumber");

                    b.Property<double>("Amount")
                        .HasColumnType("float")
                        .HasColumnName("amount");

                    b.Property<DateTime?>("Transactiondate")
                        .HasColumnType("date")
                        .HasColumnName("transactiondate");

                    b.Property<string>("Transactiontype")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("transactiontype");

                    b.HasKey("Transactionid");

                    b.ToTable("Divyansh_SBTransaction");
                });

            modelBuilder.Entity("FlightTicketReservation.Models.Employee", b =>
                {
                    b.Property<int>("Eid")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("Doj")
                        .HasColumnType("date");

                    b.Property<string>("Ename")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double?>("Salary")
                        .HasColumnType("float");

                    b.HasKey("Eid");

                    b.ToTable("Employee");
                });

            modelBuilder.Entity("FlightTicketReservation.Models.EmployeeYash", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<string>("Address")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("DateOfJoining")
                        .HasColumnType("date")
                        .HasColumnName("Date Of Joining");

                    b.Property<string>("FullName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Full Name");

                    b.Property<decimal?>("Salary")
                        .HasColumnType("decimal(18,0)");

                    b.HasKey("Id");

                    b.ToTable("Employee_Yash");
                });

            modelBuilder.Entity("FlightTicketReservation.Models.FlightDetail", b =>
                {
                    b.Property<int>("Flightid")
                        .HasColumnType("int")
                        .HasColumnName("flightid");

                    b.Property<DateTime?>("Arrivaltime")
                        .HasColumnType("datetime")
                        .HasColumnName("arrivaltime");

                    b.Property<double?>("Costperseat")
                        .HasColumnType("float")
                        .HasColumnName("costperseat");

                    b.Property<DateTime?>("Departuretime")
                        .HasColumnType("datetime")
                        .HasColumnName("departuretime");

                    b.Property<string>("Destination")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("destination");

                    b.Property<string>("Flightname")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("flightname");

                    b.Property<string>("Imagepath")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("imagepath");

                    b.Property<string>("Source")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("source");

                    b.Property<int?>("Totalcapacity")
                        .HasColumnType("int")
                        .HasColumnName("totalcapacity");

                    b.HasKey("Flightid");

                    b.ToTable("FlightDetails");
                });

            modelBuilder.Entity("FlightTicketReservation.Models.Harish1", b =>
                {
                    b.Property<int>("EmployeeNumber")
                        .HasColumnType("int")
                        .HasColumnName("employee_number");

                    b.Property<string>("EmployeeName")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .HasColumnName("employee_name")
                        .IsFixedLength(true);

                    b.HasKey("EmployeeNumber")
                        .HasName("id_pk");

                    b.ToTable("harish_1");
                });

            modelBuilder.Entity("FlightTicketReservation.Models.HarishSbaccount", b =>
                {
                    b.Property<int>("AccountNumber")
                        .HasColumnType("int");

                    b.Property<int>("CurrentBalance")
                        .HasColumnType("int");

                    b.Property<string>("CustomerAddress")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength(true);

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength(true);

                    b.HasKey("AccountNumber");

                    b.ToTable("harish_SBAccount");
                });

            modelBuilder.Entity("FlightTicketReservation.Models.HarishSbtransaction", b =>
                {
                    b.Property<int>("TId")
                        .HasColumnType("int")
                        .HasColumnName("t_id");

                    b.Property<int>("AccountNumber")
                        .HasColumnType("int");

                    b.Property<int>("Amount")
                        .HasColumnType("int")
                        .HasColumnName("amount");

                    b.Property<DateTime>("TDate")
                        .HasColumnType("date")
                        .HasColumnName("t_date");

                    b.Property<string>("TType")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .HasColumnName("t_type")
                        .IsFixedLength(true);

                    b.HasKey("TId");

                    b.ToTable("harish_SBTransaction");
                });

            modelBuilder.Entity("FlightTicketReservation.Models.HarshSbaccount", b =>
                {
                    b.Property<int>("AccountNumber")
                        .HasColumnType("int");

                    b.Property<double>("CurrentBalance")
                        .HasColumnType("float");

                    b.Property<string>("CustomerAddress")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("AccountNumber");

                    b.ToTable("Harsh_SBAccount");
                });

            modelBuilder.Entity("FlightTicketReservation.Models.HarshSbtransaction", b =>
                {
                    b.Property<int>("TransactionId")
                        .HasColumnType("int");

                    b.Property<int>("AccountNumber")
                        .HasColumnType("int");

                    b.Property<double>("Amount")
                        .HasColumnType("float")
                        .HasColumnName("amount");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime");

                    b.Property<string>("TransactionType")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("TransactionId");

                    b.ToTable("Harsh_SBTransaction");
                });

            modelBuilder.Entity("FlightTicketReservation.Models.JivikaSbaccount", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .HasColumnName("id")
                        .IsFixedLength(true);

                    b.Property<int?>("AccountNo")
                        .HasColumnType("int")
                        .HasColumnName("account_no");

                    b.Property<int?>("CurrentBalance")
                        .HasColumnType("int")
                        .HasColumnName("current_balance");

                    b.Property<string>("CustomerAddress")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .HasColumnName("customer_address")
                        .IsFixedLength(true);

                    b.Property<string>("CustomerName")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .HasColumnName("customer_name")
                        .IsFixedLength(true);

                    b.HasKey("Id");

                    b.ToTable("Jivika_SBAccount");
                });

            modelBuilder.Entity("FlightTicketReservation.Models.JivikaSbtransaction", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int?>("AccountNo")
                        .HasColumnType("int")
                        .HasColumnName("account_no");

                    b.Property<int?>("Balance")
                        .HasColumnType("int")
                        .HasColumnName("balance");

                    b.Property<DateTime?>("Dot")
                        .HasColumnType("datetime")
                        .HasColumnName("dot");

                    b.Property<string>("Type")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .HasColumnName("type")
                        .IsFixedLength(true);

                    b.HasKey("Id");

                    b.ToTable("Jivika_SBTransaction");
                });

            modelBuilder.Entity("FlightTicketReservation.Models.LekhanaSbacc", b =>
                {
                    b.Property<int>("AccNumber")
                        .HasColumnType("int")
                        .HasColumnName("acc_number");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("address");

                    b.Property<int>("Balance")
                        .HasColumnType("int")
                        .HasColumnName("balance");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.HasKey("AccNumber")
                        .HasName("PK__Lekhana___A24910AB202506CF");

                    b.ToTable("Lekhana_SBAcc");
                });

            modelBuilder.Entity("FlightTicketReservation.Models.LekhanaSbtran", b =>
                {
                    b.Property<int>("TId")
                        .HasColumnType("int")
                        .HasColumnName("t_id");

                    b.Property<int>("Accno")
                        .HasColumnType("int")
                        .HasColumnName("accno");

                    b.Property<int>("Amt")
                        .HasColumnType("int")
                        .HasColumnName("amt");

                    b.Property<DateTime>("TDate")
                        .HasColumnType("date")
                        .HasColumnName("t_date");

                    b.Property<string>("TType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("t_type");

                    b.HasKey("TId")
                        .HasName("PK_Lekhana_sbtran");

                    b.ToTable("Lekhana_SBTran");
                });

            modelBuilder.Entity("FlightTicketReservation.Models.Manisha", b =>
                {
                    b.Property<int>("Eid")
                        .HasColumnType("int");

                    b.Property<string>("Ename")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double?>("Salary")
                        .HasColumnType("float");

                    b.HasKey("Eid");

                    b.ToTable("Manisha");
                });

            modelBuilder.Entity("FlightTicketReservation.Models.ManishaEmployee", b =>
                {
                    b.Property<int>("Eid")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("Doj")
                        .HasColumnType("datetime");

                    b.Property<string>("Ename")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal?>("Salary")
                        .HasColumnType("decimal(18,0)");

                    b.HasKey("Eid");

                    b.ToTable("Manisha_Employee");
                });

            modelBuilder.Entity("FlightTicketReservation.Models.ManishaSbaccount", b =>
                {
                    b.Property<int>("Accno")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal?>("Bal")
                        .HasColumnType("decimal(18,0)");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Accno");

                    b.ToTable("Manisha_SBAccount");
                });

            modelBuilder.Entity("FlightTicketReservation.Models.ManishaSbtransaction", b =>
                {
                    b.Property<int>("TransId")
                        .HasColumnType("int")
                        .HasColumnName("TransID");

                    b.Property<int?>("Accno")
                        .HasColumnType("int");

                    b.Property<decimal?>("Amt")
                        .HasColumnType("decimal(18,0)");

                    b.Property<DateTime?>("TransDate")
                        .HasColumnType("date");

                    b.Property<string>("TransType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("TransId");

                    b.ToTable("Manisha_SBTransaction");
                });

            modelBuilder.Entity("FlightTicketReservation.Models.PracticeTable", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Image")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("image");

                    b.Property<string>("ProductName")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .HasColumnName("product_name")
                        .IsFixedLength(true);

                    b.HasKey("Id");

                    b.ToTable("PracticeTable");
                });

            modelBuilder.Entity("FlightTicketReservation.Models.RaviSbaccount", b =>
                {
                    b.Property<int>("AccountNo")
                        .HasColumnType("int")
                        .HasColumnName("Account No");

                    b.Property<double?>("CurrentBalance")
                        .HasColumnType("float")
                        .HasColumnName("Current balance");

                    b.Property<string>("CustomerAddress")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .HasColumnName("Customer Address")
                        .IsFixedLength(true);

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Customer Name");

                    b.HasKey("AccountNo");

                    b.ToTable("Ravi_SBAccount");
                });

            modelBuilder.Entity("FlightTicketReservation.Models.RaviSbtransaction", b =>
                {
                    b.Property<int>("TransactionId")
                        .HasColumnType("int")
                        .HasColumnName("Transaction Id");

                    b.Property<int?>("AccountNo")
                        .HasColumnType("int")
                        .HasColumnName("Account No");

                    b.Property<int?>("Amount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("TransactionDate")
                        .HasColumnType("date")
                        .HasColumnName("Transaction Date");

                    b.Property<string>("TransactionType")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .HasColumnName("Transaction Type")
                        .IsFixedLength(true);

                    b.HasKey("TransactionId");

                    b.ToTable("Ravi_SBTransaction");
                });

            modelBuilder.Entity("FlightTicketReservation.Models.RitikEmployee", b =>
                {
                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("Doj")
                        .HasColumnType("date");

                    b.Property<int>("Eid")
                        .HasColumnType("int");

                    b.Property<string>("Ename")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal?>("Salary")
                        .HasColumnType("decimal(18,0)");

                    b.ToTable("Ritik_Employee");
                });

            modelBuilder.Entity("FlightTicketReservation.Models.RitikSbacoount", b =>
                {
                    b.Property<string>("AccountNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CurrentBalance")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CustomerAddress")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CustomerName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("AccountNumber");

                    b.ToTable("Ritik_SBAcoount");
                });

            modelBuilder.Entity("FlightTicketReservation.Models.RitikSbtransaction", b =>
                {
                    b.Property<string>("TransactionId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("TransactionID");

                    b.Property<string>("AccountNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Amount")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TransactionDate")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TransactionType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("TransactionId");

                    b.ToTable("Ritik_SBTransaction");
                });

            modelBuilder.Entity("FlightTicketReservation.Models.RouteDetail", b =>
                {
                    b.Property<int>("Routeid")
                        .HasColumnType("int")
                        .HasColumnName("routeid");

                    b.Property<int?>("Flightid")
                        .HasColumnType("int")
                        .HasColumnName("flightid");

                    b.Property<string>("Routedesc")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("routedesc");

                    b.HasKey("Routeid");

                    b.ToTable("RouteDetails");
                });

            modelBuilder.Entity("FlightTicketReservation.Models.SarwatSbaccount", b =>
                {
                    b.Property<int>("AccountNumber")
                        .HasColumnType("int");

                    b.Property<string>("CustomerAddress")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal?>("CustomerBalance")
                        .HasColumnType("decimal(18,0)");

                    b.Property<string>("CustomerName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("AccountNumber");

                    b.ToTable("Sarwat_SBAccount");
                });

            modelBuilder.Entity("FlightTicketReservation.Models.SarwatSbtransaction", b =>
                {
                    b.Property<int>("TransactionId")
                        .HasColumnType("int")
                        .HasColumnName("TransactionID");

                    b.Property<int?>("AccountNumber")
                        .HasColumnType("int");

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(18,0)");

                    b.Property<DateTime?>("TransactionDate")
                        .HasColumnType("date");

                    b.Property<string>("TransactionType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("TransactionId");

                    b.ToTable("Sarwat_SBTransaction");
                });

            modelBuilder.Entity("FlightTicketReservation.Models.SbAccountYash", b =>
                {
                    b.Property<string>("AccountNumber")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("Account Number");

                    b.Property<decimal>("CurrentBalance")
                        .HasColumnType("decimal(18,0)")
                        .HasColumnName("Current Balance");

                    b.Property<string>("CustomerAddress")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Customer Address");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Customer Name");

                    b.HasKey("AccountNumber");

                    b.ToTable("SB_Account_Yash");
                });

            modelBuilder.Entity("FlightTicketReservation.Models.SbLoan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("amount");

                    b.Property<int>("DurationInDays")
                        .HasColumnType("int")
                        .HasColumnName("durationInDays");

                    b.Property<double>("Intrest")
                        .HasColumnType("float")
                        .HasColumnName("intrest");

                    b.Property<long>("ToAccount")
                        .HasColumnType("bigint")
                        .HasColumnName("toAccount");

                    b.HasKey("Id");

                    b.ToTable("sbLoan");
                });

            modelBuilder.Entity("FlightTicketReservation.Models.SbTransactionYash", b =>
                {
                    b.Property<string>("TransactionId")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("Transaction ID");

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("Account Number");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,0)");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime")
                        .HasColumnName("Transaction Date");

                    b.Property<string>("TransactionType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("Transaction Type");

                    b.HasKey("TransactionId");

                    b.ToTable("SB_Transaction_Yash");
                });

            modelBuilder.Entity("FlightTicketReservation.Models.SbaccountAbhishek", b =>
                {
                    b.Property<int>("AccNo")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength(true);

                    b.Property<double>("Balance")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength(true);

                    b.HasKey("AccNo")
                        .HasName("AccNo");

                    b.ToTable("SBAccount_Abhishek");
                });

            modelBuilder.Entity("FlightTicketReservation.Models.SbaccountAmresh", b =>
                {
                    b.Property<int>("AccNo")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength(true);

                    b.Property<double>("Balance")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength(true);

                    b.HasKey("AccNo");

                    b.ToTable("SBAccount_Amresh");
                });

            modelBuilder.Entity("FlightTicketReservation.Models.SbaccountSankalp", b =>
                {
                    b.Property<int>("AccountNumber")
                        .HasColumnType("int");

                    b.Property<decimal>("CreditScore")
                        .HasColumnType("decimal(18,0)");

                    b.Property<decimal>("CurrentBalance")
                        .HasColumnType("decimal(18,0)");

                    b.Property<string>("CustomerAddress")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("AccountNumber");

                    b.ToTable("SBAccount_sankalp");
                });

            modelBuilder.Entity("FlightTicketReservation.Models.SbaccountShaifali", b =>
                {
                    b.Property<int>("AccountNumber")
                        .HasColumnType("int");

                    b.Property<int>("CurrentBalance")
                        .HasColumnType("int");

                    b.Property<string>("CustomerAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("AccountNumber");

                    b.ToTable("SBAccount_Shaifali");
                });

            modelBuilder.Entity("FlightTicketReservation.Models.SbtransactionAbhishek", b =>
                {
                    b.Property<decimal>("TransactionId")
                        .HasColumnType("numeric(18,0)");

                    b.Property<decimal>("AccountNumber")
                        .HasColumnType("numeric(18,0)");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("date");

                    b.Property<string>("TransactionType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("TransactionId")
                        .HasName("TransactionId");

                    b.ToTable("SBTransaction_Abhishek");
                });

            modelBuilder.Entity("FlightTicketReservation.Models.SbtransactionAmresh", b =>
                {
                    b.Property<int>("TransactionId")
                        .HasColumnType("int");

                    b.Property<int>("AccountNumber")
                        .HasColumnType("int");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("date");

                    b.Property<string>("TransactionType")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.HasKey("TransactionId");

                    b.ToTable("SBTransaction_Amresh");
                });

            modelBuilder.Entity("FlightTicketReservation.Models.SbtransactionSankalp", b =>
                {
                    b.Property<int>("TransactionId")
                        .HasColumnType("int");

                    b.Property<int>("AccountNumber")
                        .HasColumnType("int");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric(18,0)");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("date");

                    b.Property<string>("TransactionType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("TransactionId");

                    b.ToTable("SBTransaction_sankalp");
                });

            modelBuilder.Entity("FlightTicketReservation.Models.SbtransactionShaifali", b =>
                {
                    b.Property<int>("TransactionId")
                        .HasColumnType("int")
                        .HasColumnName("TransactionID");

                    b.Property<int>("AccountNumber")
                        .HasColumnType("int");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("date");

                    b.Property<string>("TransactionType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("TransactionId");

                    b.ToTable("SBTransaction_Shaifali");
                });

            modelBuilder.Entity("FlightTicketReservation.Models.ShanSbaccount", b =>
                {
                    b.Property<int>("AccountNumber")
                        .HasColumnType("int")
                        .HasColumnName("accountNumber");

                    b.Property<decimal?>("CurrentBalance")
                        .HasColumnType("decimal(18,0)")
                        .HasColumnName("currentBalance");

                    b.Property<string>("CustomerAddress")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("customerAddress");

                    b.Property<string>("CustomerName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("customerName");

                    b.HasKey("AccountNumber");

                    b.ToTable("shan_SBAccount");
                });

            modelBuilder.Entity("FlightTicketReservation.Models.ShanSbtransaction", b =>
                {
                    b.Property<int>("AccountNumber")
                        .HasColumnType("int")
                        .HasColumnName("accountNumber");

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(18,0)")
                        .HasColumnName("amount");

                    b.Property<DateTime?>("TransactionDate")
                        .HasColumnType("datetime")
                        .HasColumnName("transactionDate");

                    b.Property<int>("TransactionId")
                        .HasColumnType("int")
                        .HasColumnName("transactionID");

                    b.Property<string>("TransactionType")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("transactionType");

                    b.ToTable("shan_SBTransaction");
                });

            modelBuilder.Entity("FlightTicketReservation.Models.Shivam", b =>
                {
                    b.Property<int>("Empid")
                        .HasColumnType("int");

                    b.Property<string>("Empname")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nchar(30)")
                        .IsFixedLength(true);

                    b.Property<int>("Salary")
                        .HasColumnType("int");

                    b.HasKey("Empid")
                        .HasName("PK_shivam_1");

                    b.ToTable("shivam");
                });

            modelBuilder.Entity("FlightTicketReservation.Models.Shivamsbaccount", b =>
                {
                    b.Property<int>("Accountnumber")
                        .HasColumnType("int");

                    b.Property<int>("Currentbalance")
                        .HasColumnType("int");

                    b.Property<string>("Customeraddress")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nchar(30)")
                        .IsFixedLength(true);

                    b.Property<string>("Customername")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nchar(30)")
                        .IsFixedLength(true);

                    b.HasKey("Accountnumber");

                    b.ToTable("shivamsbaccount");
                });

            modelBuilder.Entity("FlightTicketReservation.Models.Shivamsbtransaction", b =>
                {
                    b.Property<int>("Transactionid")
                        .HasColumnType("int")
                        .HasColumnName("transactionid");

                    b.Property<int>("Accountnumber")
                        .HasColumnType("int");

                    b.Property<int>("Amount")
                        .HasColumnType("int")
                        .HasColumnName("amount");

                    b.Property<string>("Transactiontype")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nchar(30)")
                        .HasColumnName("transactiontype")
                        .IsFixedLength(true);

                    b.Property<DateTime>("Transationdate")
                        .HasColumnType("datetime")
                        .HasColumnName("transationdate");

                    b.HasKey("Transactionid")
                        .HasName("PK_shivamsbtransaction_1");

                    b.ToTable("shivamsbtransaction");
                });

            modelBuilder.Entity("FlightTicketReservation.Models.SundaramSbaccount", b =>
                {
                    b.Property<int>("AccountNumber")
                        .HasColumnType("int");

                    b.Property<int>("CurrentBalance")
                        .HasColumnType("int");

                    b.Property<string>("CustomerAddress")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("AccountNumber");

                    b.ToTable("sundaram_SBAccount");
                });

            modelBuilder.Entity("FlightTicketReservation.Models.SundaramSbtransaction", b =>
                {
                    b.Property<int>("TransactionId")
                        .HasColumnType("int");

                    b.Property<int>("AccountNumber")
                        .HasColumnType("int");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("date");

                    b.Property<string>("TransactionType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("TransactionId");

                    b.ToTable("sundaram_SBTransaction");
                });

            modelBuilder.Entity("FlightTicketReservation.Models.Transaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("AccountNumber")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("TransactionId")
                        .HasColumnType("bigint");

                    b.Property<string>("TransactionType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("transactions");
                });

            modelBuilder.Entity("FlightTicketReservation.Models.TrasferFund", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("amount");

                    b.Property<long>("FromAccount")
                        .HasColumnType("bigint")
                        .HasColumnName("fromAccount");

                    b.Property<long>("ToAccount")
                        .HasColumnType("bigint")
                        .HasColumnName("toAccount");

                    b.HasKey("Id");

                    b.ToTable("trasferFunds");
                });

            modelBuilder.Entity("FlightTicketReservation.Models.Trial", b =>
                {
                    b.Property<int>("Eid")
                        .HasColumnType("int");

                    b.Property<string>("Ename")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("Salary")
                        .HasColumnType("int");

                    b.HasKey("Eid");

                    b.ToTable("Trial");
                });
#pragma warning restore 612, 618
        }
    }
}
